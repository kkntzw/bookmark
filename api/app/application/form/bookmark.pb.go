// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: proto/bookmark.proto

package form

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ブックマーク。
type Bookmark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ブックマークを識別するためのID。
	// MongoDB の `ObjectId` を指定する。
	// 文字列長は12バイト(24文字)。
	// 使用可能文字は `[0-9a-f]` の16文字。
	BookmarkId string `protobuf:"bytes,1,opt,name=bookmark_id,json=bookmarkId,proto3" json:"bookmark_id,omitempty"`
	// ブックマークのURI。
	// 参考 [Uniform Resource Identifier (URI): Generic Syntax]
	// (https://datatracker.ietf.org/doc/html/rfc3986)
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// ブックマークのタイトル。
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// ブックマークにつけられたタグ一覧。
	// タグはブックマーク内で一意であることが保証される。
	Tags []*Tag `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Bookmark) Reset() {
	*x = Bookmark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bookmark_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bookmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bookmark) ProtoMessage() {}

func (x *Bookmark) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bookmark_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bookmark.ProtoReflect.Descriptor instead.
func (*Bookmark) Descriptor() ([]byte, []int) {
	return file_proto_bookmark_proto_rawDescGZIP(), []int{0}
}

func (x *Bookmark) GetBookmarkId() string {
	if x != nil {
		return x.BookmarkId
	}
	return ""
}

func (x *Bookmark) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Bookmark) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Bookmark) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

// タグ。
type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// タグの名前。必須項目。
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bookmark_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bookmark_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_proto_bookmark_proto_rawDescGZIP(), []int{1}
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// `ListBookmarks` 用のリクエスト(フィールドを持たない)。
// ユーザ機能を実装する場合にフィールドを追加する。
type ListBookmarksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBookmarksRequest) Reset() {
	*x = ListBookmarksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bookmark_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBookmarksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBookmarksRequest) ProtoMessage() {}

func (x *ListBookmarksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bookmark_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBookmarksRequest.ProtoReflect.Descriptor instead.
func (*ListBookmarksRequest) Descriptor() ([]byte, []int) {
	return file_proto_bookmark_proto_rawDescGZIP(), []int{2}
}

// `ListBookmarks` 用のレスポンス。
type ListBookmarksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ブックマーク一覧。
	Bookmarks []*Bookmark `protobuf:"bytes,1,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ListBookmarksResponse) Reset() {
	*x = ListBookmarksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bookmark_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBookmarksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBookmarksResponse) ProtoMessage() {}

func (x *ListBookmarksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bookmark_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBookmarksResponse.ProtoReflect.Descriptor instead.
func (*ListBookmarksResponse) Descriptor() ([]byte, []int) {
	return file_proto_bookmark_proto_rawDescGZIP(), []int{3}
}

func (x *ListBookmarksResponse) GetBookmarks() []*Bookmark {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

// `UpdateBookmark` 用のリクエスト。
type UpdateBookmarkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ブックマークを識別するためのID。必須項目。
	BookmarkId string `protobuf:"bytes,1,opt,name=bookmark_id,json=bookmarkId,proto3" json:"bookmark_id,omitempty"`
	// ブックマークのURI。
	// 空の場合は更新の対象外となる。
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// ブックマークのタイトル。
	// 空の場合は更新の対象外となる。
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *UpdateBookmarkRequest) Reset() {
	*x = UpdateBookmarkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bookmark_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBookmarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBookmarkRequest) ProtoMessage() {}

func (x *UpdateBookmarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bookmark_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBookmarkRequest.ProtoReflect.Descriptor instead.
func (*UpdateBookmarkRequest) Descriptor() ([]byte, []int) {
	return file_proto_bookmark_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateBookmarkRequest) GetBookmarkId() string {
	if x != nil {
		return x.BookmarkId
	}
	return ""
}

func (x *UpdateBookmarkRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *UpdateBookmarkRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// `TagBookmark` 用のリクエスト。
type TagBookmarkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ブックマークを識別するためのID。必須項目。
	BookmarkId string `protobuf:"bytes,1,opt,name=bookmark_id,json=bookmarkId,proto3" json:"bookmark_id,omitempty"`
	// ブックマークにつけるタグ。必須項目。
	Tag *Tag `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *TagBookmarkRequest) Reset() {
	*x = TagBookmarkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bookmark_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagBookmarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagBookmarkRequest) ProtoMessage() {}

func (x *TagBookmarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bookmark_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagBookmarkRequest.ProtoReflect.Descriptor instead.
func (*TagBookmarkRequest) Descriptor() ([]byte, []int) {
	return file_proto_bookmark_proto_rawDescGZIP(), []int{5}
}

func (x *TagBookmarkRequest) GetBookmarkId() string {
	if x != nil {
		return x.BookmarkId
	}
	return ""
}

func (x *TagBookmarkRequest) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

// `UntagBookmark` 用のリクエスト。
type UntagBookmarkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ブックマークを識別するためのID。必須項目。
	BookmarkId string `protobuf:"bytes,1,opt,name=bookmark_id,json=bookmarkId,proto3" json:"bookmark_id,omitempty"`
	// ブックマークから外すタグ。必須項目。
	Tag *Tag `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *UntagBookmarkRequest) Reset() {
	*x = UntagBookmarkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bookmark_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UntagBookmarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UntagBookmarkRequest) ProtoMessage() {}

func (x *UntagBookmarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bookmark_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UntagBookmarkRequest.ProtoReflect.Descriptor instead.
func (*UntagBookmarkRequest) Descriptor() ([]byte, []int) {
	return file_proto_bookmark_proto_rawDescGZIP(), []int{6}
}

func (x *UntagBookmarkRequest) GetBookmarkId() string {
	if x != nil {
		return x.BookmarkId
	}
	return ""
}

func (x *UntagBookmarkRequest) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

// `DeleteBookmark` 用のリクエスト。
type DeleteBookmarkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ブックマークを識別するためのID。必須項目。
	BookmarkId string `protobuf:"bytes,1,opt,name=bookmark_id,json=bookmarkId,proto3" json:"bookmark_id,omitempty"`
}

func (x *DeleteBookmarkRequest) Reset() {
	*x = DeleteBookmarkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bookmark_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBookmarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBookmarkRequest) ProtoMessage() {}

func (x *DeleteBookmarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bookmark_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBookmarkRequest.ProtoReflect.Descriptor instead.
func (*DeleteBookmarkRequest) Descriptor() ([]byte, []int) {
	return file_proto_bookmark_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteBookmarkRequest) GetBookmarkId() string {
	if x != nil {
		return x.BookmarkId
	}
	return ""
}

var File_proto_bookmark_proto protoreflect.FileDescriptor

var file_proto_bookmark_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76, 0x0a,
	0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x54, 0x61, 0x67, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x19, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x16, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x22, 0x60, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x56, 0x0a, 0x12, 0x54, 0x61, 0x67, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x58, 0x0a,
	0x14, 0x55, 0x6e, 0x74, 0x61, 0x67, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x54,
	0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x38, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x49,
	0x64, 0x32, 0xeb, 0x03, 0x0a, 0x0a, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x12, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x1a, 0x12, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x39, 0x0a, 0x0d, 0x46, 0x69,
	0x6e, 0x64, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x12, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x1a,
	0x12, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x1e, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x3f,
	0x0a, 0x0b, 0x54, 0x61, 0x67, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1c, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x54, 0x61, 0x67, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x43, 0x0a, 0x0d, 0x55, 0x6e, 0x74, 0x61, 0x67, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x1e, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x55, 0x6e, 0x74, 0x61,
	0x67, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x49, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42,
	0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_bookmark_proto_rawDescOnce sync.Once
	file_proto_bookmark_proto_rawDescData = file_proto_bookmark_proto_rawDesc
)

func file_proto_bookmark_proto_rawDescGZIP() []byte {
	file_proto_bookmark_proto_rawDescOnce.Do(func() {
		file_proto_bookmark_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_bookmark_proto_rawDescData)
	})
	return file_proto_bookmark_proto_rawDescData
}

var file_proto_bookmark_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_bookmark_proto_goTypes = []interface{}{
	(*Bookmark)(nil),              // 0: bookmark.Bookmark
	(*Tag)(nil),                   // 1: bookmark.Tag
	(*ListBookmarksRequest)(nil),  // 2: bookmark.ListBookmarksRequest
	(*ListBookmarksResponse)(nil), // 3: bookmark.ListBookmarksResponse
	(*UpdateBookmarkRequest)(nil), // 4: bookmark.UpdateBookmarkRequest
	(*TagBookmarkRequest)(nil),    // 5: bookmark.TagBookmarkRequest
	(*UntagBookmarkRequest)(nil),  // 6: bookmark.UntagBookmarkRequest
	(*DeleteBookmarkRequest)(nil), // 7: bookmark.DeleteBookmarkRequest
	(*emptypb.Empty)(nil),         // 8: google.protobuf.Empty
}
var file_proto_bookmark_proto_depIdxs = []int32{
	1,  // 0: bookmark.Bookmark.tags:type_name -> bookmark.Tag
	0,  // 1: bookmark.ListBookmarksResponse.bookmarks:type_name -> bookmark.Bookmark
	1,  // 2: bookmark.TagBookmarkRequest.tag:type_name -> bookmark.Tag
	1,  // 3: bookmark.UntagBookmarkRequest.tag:type_name -> bookmark.Tag
	0,  // 4: bookmark.Bookmarker.CreateBookmark:input_type -> bookmark.Bookmark
	0,  // 5: bookmark.Bookmarker.FindBookmarks:input_type -> bookmark.Bookmark
	2,  // 6: bookmark.Bookmarker.ListBookmarks:input_type -> bookmark.ListBookmarksRequest
	4,  // 7: bookmark.Bookmarker.UpdateBookmark:input_type -> bookmark.UpdateBookmarkRequest
	5,  // 8: bookmark.Bookmarker.TagBookmark:input_type -> bookmark.TagBookmarkRequest
	6,  // 9: bookmark.Bookmarker.UntagBookmark:input_type -> bookmark.UntagBookmarkRequest
	7,  // 10: bookmark.Bookmarker.DeleteBookmark:input_type -> bookmark.DeleteBookmarkRequest
	0,  // 11: bookmark.Bookmarker.CreateBookmark:output_type -> bookmark.Bookmark
	0,  // 12: bookmark.Bookmarker.FindBookmarks:output_type -> bookmark.Bookmark
	3,  // 13: bookmark.Bookmarker.ListBookmarks:output_type -> bookmark.ListBookmarksResponse
	0,  // 14: bookmark.Bookmarker.UpdateBookmark:output_type -> bookmark.Bookmark
	0,  // 15: bookmark.Bookmarker.TagBookmark:output_type -> bookmark.Bookmark
	0,  // 16: bookmark.Bookmarker.UntagBookmark:output_type -> bookmark.Bookmark
	8,  // 17: bookmark.Bookmarker.DeleteBookmark:output_type -> google.protobuf.Empty
	11, // [11:18] is the sub-list for method output_type
	4,  // [4:11] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_proto_bookmark_proto_init() }
func file_proto_bookmark_proto_init() {
	if File_proto_bookmark_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_bookmark_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bookmark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bookmark_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bookmark_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBookmarksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bookmark_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBookmarksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bookmark_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBookmarkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bookmark_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagBookmarkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bookmark_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UntagBookmarkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bookmark_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBookmarkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_bookmark_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_bookmark_proto_goTypes,
		DependencyIndexes: file_proto_bookmark_proto_depIdxs,
		MessageInfos:      file_proto_bookmark_proto_msgTypes,
	}.Build()
	File_proto_bookmark_proto = out.File
	file_proto_bookmark_proto_rawDesc = nil
	file_proto_bookmark_proto_goTypes = nil
	file_proto_bookmark_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BookmarkerClient is the client API for Bookmarker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BookmarkerClient interface {
	// 新規のブックマークを作成する。
	CreateBookmark(ctx context.Context, in *Bookmark, opts ...grpc.CallOption) (*Bookmark, error)
	// 条件に合致するブックマークを検索する。
	// 完全一致検索ではなく、あいまい検索を行う。
	// 条件に合致するブックマークが存在しない場合は `NOT_FOUND` を返却する。
	FindBookmarks(ctx context.Context, in *Bookmark, opts ...grpc.CallOption) (Bookmarker_FindBookmarksClient, error)
	// ブックマークを一覧表示する。
	ListBookmarks(ctx context.Context, in *ListBookmarksRequest, opts ...grpc.CallOption) (*ListBookmarksResponse, error)
	// 既存のブックマークを更新する。
	// 指定したIDのブックマークが存在しない場合は `NOT_FOUND` を返却する。
	UpdateBookmark(ctx context.Context, in *UpdateBookmarkRequest, opts ...grpc.CallOption) (*Bookmark, error)
	// 既存のブックマークにタグをつける。
	// 指定したIDのブックマークが存在しない場合は `NOT_FOUND` を返却する。
	// 重複するタグを指定した場合は `ALREADY_EXISTS` を返却する。
	TagBookmark(ctx context.Context, in *TagBookmarkRequest, opts ...grpc.CallOption) (*Bookmark, error)
	// 既存のブックマークからタグを外す。
	// 指定したIDのブックマークが存在しない場合は `NOT_FOUND` を返却する。
	// 存在しないタグを指定した場合は `INVALID_ARGUMENT` を返却する。
	UntagBookmark(ctx context.Context, in *UntagBookmarkRequest, opts ...grpc.CallOption) (*Bookmark, error)
	// 既存のブックマークを削除する。
	// 指定したIDのブックマークが存在しない場合は `NOT_FOUND` を返却する。
	DeleteBookmark(ctx context.Context, in *DeleteBookmarkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bookmarkerClient struct {
	cc grpc.ClientConnInterface
}

func NewBookmarkerClient(cc grpc.ClientConnInterface) BookmarkerClient {
	return &bookmarkerClient{cc}
}

func (c *bookmarkerClient) CreateBookmark(ctx context.Context, in *Bookmark, opts ...grpc.CallOption) (*Bookmark, error) {
	out := new(Bookmark)
	err := c.cc.Invoke(ctx, "/bookmark.Bookmarker/CreateBookmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookmarkerClient) FindBookmarks(ctx context.Context, in *Bookmark, opts ...grpc.CallOption) (Bookmarker_FindBookmarksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Bookmarker_serviceDesc.Streams[0], "/bookmark.Bookmarker/FindBookmarks", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookmarkerFindBookmarksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bookmarker_FindBookmarksClient interface {
	Recv() (*Bookmark, error)
	grpc.ClientStream
}

type bookmarkerFindBookmarksClient struct {
	grpc.ClientStream
}

func (x *bookmarkerFindBookmarksClient) Recv() (*Bookmark, error) {
	m := new(Bookmark)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookmarkerClient) ListBookmarks(ctx context.Context, in *ListBookmarksRequest, opts ...grpc.CallOption) (*ListBookmarksResponse, error) {
	out := new(ListBookmarksResponse)
	err := c.cc.Invoke(ctx, "/bookmark.Bookmarker/ListBookmarks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookmarkerClient) UpdateBookmark(ctx context.Context, in *UpdateBookmarkRequest, opts ...grpc.CallOption) (*Bookmark, error) {
	out := new(Bookmark)
	err := c.cc.Invoke(ctx, "/bookmark.Bookmarker/UpdateBookmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookmarkerClient) TagBookmark(ctx context.Context, in *TagBookmarkRequest, opts ...grpc.CallOption) (*Bookmark, error) {
	out := new(Bookmark)
	err := c.cc.Invoke(ctx, "/bookmark.Bookmarker/TagBookmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookmarkerClient) UntagBookmark(ctx context.Context, in *UntagBookmarkRequest, opts ...grpc.CallOption) (*Bookmark, error) {
	out := new(Bookmark)
	err := c.cc.Invoke(ctx, "/bookmark.Bookmarker/UntagBookmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookmarkerClient) DeleteBookmark(ctx context.Context, in *DeleteBookmarkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bookmark.Bookmarker/DeleteBookmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookmarkerServer is the server API for Bookmarker service.
type BookmarkerServer interface {
	// 新規のブックマークを作成する。
	CreateBookmark(context.Context, *Bookmark) (*Bookmark, error)
	// 条件に合致するブックマークを検索する。
	// 完全一致検索ではなく、あいまい検索を行う。
	// 条件に合致するブックマークが存在しない場合は `NOT_FOUND` を返却する。
	FindBookmarks(*Bookmark, Bookmarker_FindBookmarksServer) error
	// ブックマークを一覧表示する。
	ListBookmarks(context.Context, *ListBookmarksRequest) (*ListBookmarksResponse, error)
	// 既存のブックマークを更新する。
	// 指定したIDのブックマークが存在しない場合は `NOT_FOUND` を返却する。
	UpdateBookmark(context.Context, *UpdateBookmarkRequest) (*Bookmark, error)
	// 既存のブックマークにタグをつける。
	// 指定したIDのブックマークが存在しない場合は `NOT_FOUND` を返却する。
	// 重複するタグを指定した場合は `ALREADY_EXISTS` を返却する。
	TagBookmark(context.Context, *TagBookmarkRequest) (*Bookmark, error)
	// 既存のブックマークからタグを外す。
	// 指定したIDのブックマークが存在しない場合は `NOT_FOUND` を返却する。
	// 存在しないタグを指定した場合は `INVALID_ARGUMENT` を返却する。
	UntagBookmark(context.Context, *UntagBookmarkRequest) (*Bookmark, error)
	// 既存のブックマークを削除する。
	// 指定したIDのブックマークが存在しない場合は `NOT_FOUND` を返却する。
	DeleteBookmark(context.Context, *DeleteBookmarkRequest) (*emptypb.Empty, error)
}

// UnimplementedBookmarkerServer can be embedded to have forward compatible implementations.
type UnimplementedBookmarkerServer struct {
}

func (*UnimplementedBookmarkerServer) CreateBookmark(context.Context, *Bookmark) (*Bookmark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBookmark not implemented")
}
func (*UnimplementedBookmarkerServer) FindBookmarks(*Bookmark, Bookmarker_FindBookmarksServer) error {
	return status.Errorf(codes.Unimplemented, "method FindBookmarks not implemented")
}
func (*UnimplementedBookmarkerServer) ListBookmarks(context.Context, *ListBookmarksRequest) (*ListBookmarksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookmarks not implemented")
}
func (*UnimplementedBookmarkerServer) UpdateBookmark(context.Context, *UpdateBookmarkRequest) (*Bookmark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBookmark not implemented")
}
func (*UnimplementedBookmarkerServer) TagBookmark(context.Context, *TagBookmarkRequest) (*Bookmark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagBookmark not implemented")
}
func (*UnimplementedBookmarkerServer) UntagBookmark(context.Context, *UntagBookmarkRequest) (*Bookmark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UntagBookmark not implemented")
}
func (*UnimplementedBookmarkerServer) DeleteBookmark(context.Context, *DeleteBookmarkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookmark not implemented")
}

func RegisterBookmarkerServer(s *grpc.Server, srv BookmarkerServer) {
	s.RegisterService(&_Bookmarker_serviceDesc, srv)
}

func _Bookmarker_CreateBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bookmark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkerServer).CreateBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookmark.Bookmarker/CreateBookmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkerServer).CreateBookmark(ctx, req.(*Bookmark))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookmarker_FindBookmarks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Bookmark)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookmarkerServer).FindBookmarks(m, &bookmarkerFindBookmarksServer{stream})
}

type Bookmarker_FindBookmarksServer interface {
	Send(*Bookmark) error
	grpc.ServerStream
}

type bookmarkerFindBookmarksServer struct {
	grpc.ServerStream
}

func (x *bookmarkerFindBookmarksServer) Send(m *Bookmark) error {
	return x.ServerStream.SendMsg(m)
}

func _Bookmarker_ListBookmarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBookmarksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkerServer).ListBookmarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookmark.Bookmarker/ListBookmarks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkerServer).ListBookmarks(ctx, req.(*ListBookmarksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookmarker_UpdateBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkerServer).UpdateBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookmark.Bookmarker/UpdateBookmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkerServer).UpdateBookmark(ctx, req.(*UpdateBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookmarker_TagBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkerServer).TagBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookmark.Bookmarker/TagBookmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkerServer).TagBookmark(ctx, req.(*TagBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookmarker_UntagBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UntagBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkerServer).UntagBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookmark.Bookmarker/UntagBookmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkerServer).UntagBookmark(ctx, req.(*UntagBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookmarker_DeleteBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkerServer).DeleteBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookmark.Bookmarker/DeleteBookmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkerServer).DeleteBookmark(ctx, req.(*DeleteBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bookmarker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bookmark.Bookmarker",
	HandlerType: (*BookmarkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBookmark",
			Handler:    _Bookmarker_CreateBookmark_Handler,
		},
		{
			MethodName: "ListBookmarks",
			Handler:    _Bookmarker_ListBookmarks_Handler,
		},
		{
			MethodName: "UpdateBookmark",
			Handler:    _Bookmarker_UpdateBookmark_Handler,
		},
		{
			MethodName: "TagBookmark",
			Handler:    _Bookmarker_TagBookmark_Handler,
		},
		{
			MethodName: "UntagBookmark",
			Handler:    _Bookmarker_UntagBookmark_Handler,
		},
		{
			MethodName: "DeleteBookmark",
			Handler:    _Bookmarker_DeleteBookmark_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindBookmarks",
			Handler:       _Bookmarker_FindBookmarks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/bookmark.proto",
}
