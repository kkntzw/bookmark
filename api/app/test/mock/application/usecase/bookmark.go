// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/application/usecase/bookmark.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	command "github.com/kkntzw/bookmark/internal/application/command"
	dto "github.com/kkntzw/bookmark/internal/application/dto"
)

// MockBookmark is a mock of Bookmark interface.
type MockBookmark struct {
	ctrl     *gomock.Controller
	recorder *MockBookmarkMockRecorder
}

// MockBookmarkMockRecorder is the mock recorder for MockBookmark.
type MockBookmarkMockRecorder struct {
	mock *MockBookmark
}

// NewMockBookmark creates a new mock instance.
func NewMockBookmark(ctrl *gomock.Controller) *MockBookmark {
	mock := &MockBookmark{ctrl: ctrl}
	mock.recorder = &MockBookmarkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookmark) EXPECT() *MockBookmarkMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockBookmark) List() ([]dto.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]dto.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBookmarkMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBookmark)(nil).List))
}

// Register mocks base method.
func (m *MockBookmark) Register(arg0 *command.RegisterBookmark) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockBookmarkMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockBookmark)(nil).Register), arg0)
}

// Update mocks base method.
func (m *MockBookmark) Update(arg0 *command.UpdateBookmark) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBookmarkMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBookmark)(nil).Update), arg0)
}
