// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/service/bookmark.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/kkntzw/bookmark/internal/domain/entity"
)

// MockBookmark is a mock of Bookmark interface.
type MockBookmark struct {
	ctrl     *gomock.Controller
	recorder *MockBookmarkMockRecorder
}

// MockBookmarkMockRecorder is the mock recorder for MockBookmark.
type MockBookmarkMockRecorder struct {
	mock *MockBookmark
}

// NewMockBookmark creates a new mock instance.
func NewMockBookmark(ctrl *gomock.Controller) *MockBookmark {
	mock := &MockBookmark{ctrl: ctrl}
	mock.recorder = &MockBookmarkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookmark) EXPECT() *MockBookmarkMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockBookmark) Exists(bookmark *entity.Bookmark) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", bookmark)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockBookmarkMockRecorder) Exists(bookmark interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockBookmark)(nil).Exists), bookmark)
}
