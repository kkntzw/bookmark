// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/presentation/pb/bookmark_grpc.pb.go

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/kkntzw/bookmark/internal/presentation/pb"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockBookmarkerClient is a mock of BookmarkerClient interface.
type MockBookmarkerClient struct {
	ctrl     *gomock.Controller
	recorder *MockBookmarkerClientMockRecorder
}

// MockBookmarkerClientMockRecorder is the mock recorder for MockBookmarkerClient.
type MockBookmarkerClientMockRecorder struct {
	mock *MockBookmarkerClient
}

// NewMockBookmarkerClient creates a new mock instance.
func NewMockBookmarkerClient(ctrl *gomock.Controller) *MockBookmarkerClient {
	mock := &MockBookmarkerClient{ctrl: ctrl}
	mock.recorder = &MockBookmarkerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookmarkerClient) EXPECT() *MockBookmarkerClientMockRecorder {
	return m.recorder
}

// CreateBookmark mocks base method.
func (m *MockBookmarkerClient) CreateBookmark(ctx context.Context, in *pb.CreateBookmarkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBookmark", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookmark indicates an expected call of CreateBookmark.
func (mr *MockBookmarkerClientMockRecorder) CreateBookmark(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookmark", reflect.TypeOf((*MockBookmarkerClient)(nil).CreateBookmark), varargs...)
}

// ListBookmarks mocks base method.
func (m *MockBookmarkerClient) ListBookmarks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (pb.Bookmarker_ListBookmarksClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBookmarks", varargs...)
	ret0, _ := ret[0].(pb.Bookmarker_ListBookmarksClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBookmarks indicates an expected call of ListBookmarks.
func (mr *MockBookmarkerClientMockRecorder) ListBookmarks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBookmarks", reflect.TypeOf((*MockBookmarkerClient)(nil).ListBookmarks), varargs...)
}

// MockBookmarker_ListBookmarksClient is a mock of Bookmarker_ListBookmarksClient interface.
type MockBookmarker_ListBookmarksClient struct {
	ctrl     *gomock.Controller
	recorder *MockBookmarker_ListBookmarksClientMockRecorder
}

// MockBookmarker_ListBookmarksClientMockRecorder is the mock recorder for MockBookmarker_ListBookmarksClient.
type MockBookmarker_ListBookmarksClientMockRecorder struct {
	mock *MockBookmarker_ListBookmarksClient
}

// NewMockBookmarker_ListBookmarksClient creates a new mock instance.
func NewMockBookmarker_ListBookmarksClient(ctrl *gomock.Controller) *MockBookmarker_ListBookmarksClient {
	mock := &MockBookmarker_ListBookmarksClient{ctrl: ctrl}
	mock.recorder = &MockBookmarker_ListBookmarksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookmarker_ListBookmarksClient) EXPECT() *MockBookmarker_ListBookmarksClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockBookmarker_ListBookmarksClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockBookmarker_ListBookmarksClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBookmarker_ListBookmarksClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockBookmarker_ListBookmarksClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBookmarker_ListBookmarksClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBookmarker_ListBookmarksClient)(nil).Context))
}

// Header mocks base method.
func (m *MockBookmarker_ListBookmarksClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockBookmarker_ListBookmarksClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBookmarker_ListBookmarksClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockBookmarker_ListBookmarksClient) Recv() (*pb.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockBookmarker_ListBookmarksClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBookmarker_ListBookmarksClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockBookmarker_ListBookmarksClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBookmarker_ListBookmarksClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBookmarker_ListBookmarksClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockBookmarker_ListBookmarksClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBookmarker_ListBookmarksClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBookmarker_ListBookmarksClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockBookmarker_ListBookmarksClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockBookmarker_ListBookmarksClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBookmarker_ListBookmarksClient)(nil).Trailer))
}

// MockBookmarkerServer is a mock of BookmarkerServer interface.
type MockBookmarkerServer struct {
	ctrl     *gomock.Controller
	recorder *MockBookmarkerServerMockRecorder
}

// MockBookmarkerServerMockRecorder is the mock recorder for MockBookmarkerServer.
type MockBookmarkerServerMockRecorder struct {
	mock *MockBookmarkerServer
}

// NewMockBookmarkerServer creates a new mock instance.
func NewMockBookmarkerServer(ctrl *gomock.Controller) *MockBookmarkerServer {
	mock := &MockBookmarkerServer{ctrl: ctrl}
	mock.recorder = &MockBookmarkerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookmarkerServer) EXPECT() *MockBookmarkerServerMockRecorder {
	return m.recorder
}

// CreateBookmark mocks base method.
func (m *MockBookmarkerServer) CreateBookmark(arg0 context.Context, arg1 *pb.CreateBookmarkRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookmark", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookmark indicates an expected call of CreateBookmark.
func (mr *MockBookmarkerServerMockRecorder) CreateBookmark(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookmark", reflect.TypeOf((*MockBookmarkerServer)(nil).CreateBookmark), arg0, arg1)
}

// ListBookmarks mocks base method.
func (m *MockBookmarkerServer) ListBookmarks(arg0 *emptypb.Empty, arg1 pb.Bookmarker_ListBookmarksServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBookmarks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBookmarks indicates an expected call of ListBookmarks.
func (mr *MockBookmarkerServerMockRecorder) ListBookmarks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBookmarks", reflect.TypeOf((*MockBookmarkerServer)(nil).ListBookmarks), arg0, arg1)
}

// mustEmbedUnimplementedBookmarkerServer mocks base method.
func (m *MockBookmarkerServer) mustEmbedUnimplementedBookmarkerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBookmarkerServer")
}

// mustEmbedUnimplementedBookmarkerServer indicates an expected call of mustEmbedUnimplementedBookmarkerServer.
func (mr *MockBookmarkerServerMockRecorder) mustEmbedUnimplementedBookmarkerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBookmarkerServer", reflect.TypeOf((*MockBookmarkerServer)(nil).mustEmbedUnimplementedBookmarkerServer))
}

// MockUnsafeBookmarkerServer is a mock of UnsafeBookmarkerServer interface.
type MockUnsafeBookmarkerServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBookmarkerServerMockRecorder
}

// MockUnsafeBookmarkerServerMockRecorder is the mock recorder for MockUnsafeBookmarkerServer.
type MockUnsafeBookmarkerServerMockRecorder struct {
	mock *MockUnsafeBookmarkerServer
}

// NewMockUnsafeBookmarkerServer creates a new mock instance.
func NewMockUnsafeBookmarkerServer(ctrl *gomock.Controller) *MockUnsafeBookmarkerServer {
	mock := &MockUnsafeBookmarkerServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBookmarkerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBookmarkerServer) EXPECT() *MockUnsafeBookmarkerServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBookmarkerServer mocks base method.
func (m *MockUnsafeBookmarkerServer) mustEmbedUnimplementedBookmarkerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBookmarkerServer")
}

// mustEmbedUnimplementedBookmarkerServer indicates an expected call of mustEmbedUnimplementedBookmarkerServer.
func (mr *MockUnsafeBookmarkerServerMockRecorder) mustEmbedUnimplementedBookmarkerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBookmarkerServer", reflect.TypeOf((*MockUnsafeBookmarkerServer)(nil).mustEmbedUnimplementedBookmarkerServer))
}

// MockBookmarker_ListBookmarksServer is a mock of Bookmarker_ListBookmarksServer interface.
type MockBookmarker_ListBookmarksServer struct {
	ctrl     *gomock.Controller
	recorder *MockBookmarker_ListBookmarksServerMockRecorder
}

// MockBookmarker_ListBookmarksServerMockRecorder is the mock recorder for MockBookmarker_ListBookmarksServer.
type MockBookmarker_ListBookmarksServerMockRecorder struct {
	mock *MockBookmarker_ListBookmarksServer
}

// NewMockBookmarker_ListBookmarksServer creates a new mock instance.
func NewMockBookmarker_ListBookmarksServer(ctrl *gomock.Controller) *MockBookmarker_ListBookmarksServer {
	mock := &MockBookmarker_ListBookmarksServer{ctrl: ctrl}
	mock.recorder = &MockBookmarker_ListBookmarksServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookmarker_ListBookmarksServer) EXPECT() *MockBookmarker_ListBookmarksServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockBookmarker_ListBookmarksServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBookmarker_ListBookmarksServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBookmarker_ListBookmarksServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockBookmarker_ListBookmarksServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBookmarker_ListBookmarksServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBookmarker_ListBookmarksServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockBookmarker_ListBookmarksServer) Send(arg0 *pb.Bookmark) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBookmarker_ListBookmarksServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBookmarker_ListBookmarksServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockBookmarker_ListBookmarksServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockBookmarker_ListBookmarksServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBookmarker_ListBookmarksServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockBookmarker_ListBookmarksServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBookmarker_ListBookmarksServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBookmarker_ListBookmarksServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockBookmarker_ListBookmarksServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockBookmarker_ListBookmarksServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBookmarker_ListBookmarksServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockBookmarker_ListBookmarksServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockBookmarker_ListBookmarksServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBookmarker_ListBookmarksServer)(nil).SetTrailer), arg0)
}
